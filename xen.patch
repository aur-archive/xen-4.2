diff -Naur xen-unstable.git/tools/hotplug/Linux/init.d/xen-watchdog xen-unstable.git-b/tools/hotplug/Linux/init.d/xen-watchdog
--- xen-unstable.git/tools/hotplug/Linux/init.d/xen-watchdog	2012-06-21 06:07:36.024092668 -0600
+++ xen-unstable.git-b/tools/hotplug/Linux/init.d/xen-watchdog	2012-06-21 06:09:46.790759333 -0600
@@ -17,49 +17,32 @@
 ### END INIT INFO
 #
 
+. /etc/rc.conf
+. /etc/rc.d/functions
+
 DAEMON=/usr/sbin/xenwatchdogd
 base=$(basename $DAEMON)
+initname="xen-watchdog"
 
-# Source function library.
-if [ -e  /etc/init.d/functions ] ; then
-    . /etc/init.d/functions
-elif [ -e /lib/lsb/init-functions ] ; then
-    . /lib/lsb/init-functions
-    success () {
-        log_success_msg $*
-    }
-    failure () {
-        log_failure_msg $*
-    }
-else
-    success () {
-        echo $*
-    }
-    failure () {
-        echo $*
-    }
-fi
 
 start() {
 	local r
-	echo -n $"Starting domain watchdog daemon: "
+	stat_busy "Starting domain watchdog daemon"
 
 	$DAEMON 30 15
 	r=$?
-	[ "$r" -eq 0 ] && success $"$base startup" || failure $"$base startup"
-	echo
+	[ "$r" -eq 0 ] && stat_done ; add_daemon $initname || stat_fail
 
 	return $r
 }
 
 stop() {
 	local r
-	echo -n $"Stopping domain watchdog daemon: "
+	stat_busy "Stopping domain watchdog daemon"
 
 	killall -USR1 $base 2>/dev/null
 	r=$?
-	[ "$r" -eq 0 ] && success $"$base stop" || failure $"$base stop"
-	echo
+	[ "$r" -eq 0 ] && stat_done ; rm_daemon $initname || stat_fail
 
 	return $r
 }
diff -Naur xen-unstable.git/tools/hotplug/Linux/init.d/xencommons xen-unstable.git-b/tools/hotplug/Linux/init.d/xencommons
--- xen-unstable.git/tools/hotplug/Linux/init.d/xencommons	2012-06-21 06:07:36.024092668 -0600
+++ xen-unstable.git-b/tools/hotplug/Linux/init.d/xencommons	2012-06-21 06:44:19.550759334 -0600
@@ -18,6 +18,9 @@
 # Description:       Starts and stops the daemons neeeded for xl/xend
 ### END INIT INFO
 
+. /etc/rc.conf
+. /etc/rc.d/functions
+
 if [ -d /etc/sysconfig ]; then
 	xencommons_config=/etc/sysconfig
 else
@@ -26,7 +29,7 @@
 
 test -f $xencommons_config/xencommons && . $xencommons_config/xencommons
 
-XENCONSOLED_PIDFILE=/var/run/xenconsoled.pid
+XENCONSOLED_PIDFILE=/run/daemons/xenconsoled.pid
 shopt -s extglob
 
 # not running in Xen dom0 or domU
@@ -59,7 +62,7 @@
 	modprobe evtchn 2>/dev/null
 	modprobe gntdev 2>/dev/null
 	modprobe xen-acpi-processor 2>/dev/null
-	mkdir -p /var/run/xen
+	mkdir -p /run/daemons/xen
 
 	if ! `xenstore-read -s / >/dev/null 2>&1`
 	then
@@ -69,13 +72,13 @@
 
 		if [ -n "$XENSTORED" ] ; then
 		    echo -n Starting $XENSTORED...
-		    $XENSTORED --pid-file /var/run/xenstored.pid $XENSTORED_ARGS
+		    $XENSTORED --pid-file /run/daemons/xenstored.pid $XENSTORED_ARGS
 		elif [ -x /usr/sbin/oxenstored ] ; then
 		    echo -n Starting oxenstored...
-		    /usr/sbin/oxenstored --pid-file /var/run/xenstored.pid $XENSTORED_ARGS
+		    /usr/sbin/oxenstored --pid-file /run/daemons/xenstored.pid $XENSTORED_ARGS
 		elif [ -x /usr/sbin/xenstored ] ; then
 		    echo -n Starting C xenstored...
-		    /usr/sbin/xenstored --pid-file /var/run/xenstored.pid $XENSTORED_ARGS
+		    /usr/sbin/xenstored --pid-file /run/daemons/xenstored.pid $XENSTORED_ARGS
 		else
 		    echo "No xenstored found"
 		    exit 1
@@ -91,15 +94,16 @@
 
 		# Exit if we timed out
 		if ! [ $time -lt $timeout ] ; then
-		    echo Could not start xenstored
+		    stat_fail
 		    exit 1
 		fi
-
-		echo Setting domain 0 name...
+                 stat_done
+		stat_busy "Setting domain 0 name..."
 		xenstore-write "/local/domain/0/name" "Domain-0"
+                stat_done
 	fi
-
-	echo Starting xenconsoled...
+       
+	stat_busy "Starting xenconsoled"
 	test -z "$XENCONSOLED_TRACE" || XENCONSOLED_ARGS=" --log=$XENCONSOLED_TRACE"
 	xenconsoled --pid-file=$XENCONSOLED_PIDFILE $XENCONSOLED_ARGS
 	test -z "$XENBACKENDD_DEBUG" || XENBACKENDD_ARGS="-d"
@@ -107,16 +111,20 @@
 	echo Starting QEMU as disk backend for dom0
 	test -z "$QEMU_XEN" && QEMU_XEN=/usr/lib/xen/bin/qemu-system-i386
 	$QEMU_XEN -xen-domid 0 -xen-attach -name dom0 -nographic -M xenpv -daemonize -monitor /dev/null
+        stat_done
+        add_daemon xencommons
 }
 do_stop () {
-        echo Stopping xenconsoled
+        stat_busy "Stopping xenconsoled"
 	if read 2>/dev/null <$XENCONSOLED_PIDFILE pid; then
 		kill $pid
 		while kill -9 $pid >/dev/null 2>&1; do sleep 0.1; done
 		rm -f $XENCONSOLED_PIDFILE
 	fi
+        stat_done
+        printhl "WARNING: Not stopping xenstored, as it cannot be restarted."
+        rm_daemon xencommons
 
-	echo WARNING: Not stopping xenstored, as it cannot be restarted.
 }
 
 case "$1" in
diff -Naur xen-unstable.git/tools/hotplug/Linux/init.d/xencommons.orig xen-unstable.git-b/tools/hotplug/Linux/init.d/xencommons.orig
--- xen-unstable.git/tools/hotplug/Linux/init.d/xencommons.orig	1969-12-31 17:00:00.000000000 -0700
+++ xen-unstable.git-b/tools/hotplug/Linux/init.d/xencommons.orig	2012-06-21 06:07:36.024092668 -0600
@@ -0,0 +1,146 @@
+#!/bin/bash
+#
+# xencommons    Script to start and stop xenstored and xenconsoled
+#
+# Author:       Ian Jackson <ian.jackson@eu.citrix.com>
+#
+# chkconfig: 2345 70 10
+# description: Starts and stops xenstored and xenconsoled
+### BEGIN INIT INFO
+# Provides:          xenstored xenconsoled
+# Required-Start:    $syslog $remote_fs
+# Should-Start:
+# Required-Stop:     $syslog $remote_fs
+# Should-Stop:
+# Default-Start:     2 3 5
+# Default-Stop:      0 1 6
+# Short-Description: Start/stop xenstored and xenconsoled
+# Description:       Starts and stops the daemons neeeded for xl/xend
+### END INIT INFO
+
+if [ -d /etc/sysconfig ]; then
+	xencommons_config=/etc/sysconfig
+else
+	xencommons_config=/etc/default
+fi
+
+test -f $xencommons_config/xencommons && . $xencommons_config/xencommons
+
+XENCONSOLED_PIDFILE=/var/run/xenconsoled.pid
+shopt -s extglob
+
+# not running in Xen dom0 or domU
+if ! test -d /proc/xen ; then
+	exit 0
+fi
+
+# mount xenfs in dom0 or domU with a pv_ops kernel
+if test "x$1" = xstart && \
+   ! test -f /proc/xen/capabilities && \
+   ! grep '^xenfs ' /proc/mounts >/dev/null;
+then
+	mount -t xenfs xenfs /proc/xen
+fi
+
+# run this script only in dom0:
+# no capabilities file in xenlinux domU kernel
+# empty capabilities file in pv_ops domU kernel
+if test -f /proc/xen/capabilities && \
+   ! grep -q "control_d" /proc/xen/capabilities ; then
+	exit 0
+fi
+
+do_start () {
+        local time=0
+	local timeout=30
+
+	modprobe xen-evtchn 2>/dev/null
+	modprobe xen-gntdev 2>/dev/null
+	modprobe evtchn 2>/dev/null
+	modprobe gntdev 2>/dev/null
+	modprobe xen-acpi-processor 2>/dev/null
+	mkdir -p /var/run/xen
+
+	if ! `xenstore-read -s / >/dev/null 2>&1`
+	then
+		test -z "$XENSTORED_ROOTDIR" && XENSTORED_ROOTDIR="/var/lib/xenstored"
+		rm -f "$XENSTORED_ROOTDIR"/tdb* &>/dev/null
+		test -z "$XENSTORED_TRACE" || XENSTORED_ARGS=" -T /var/log/xen/xenstored-trace.log"
+
+		if [ -n "$XENSTORED" ] ; then
+		    echo -n Starting $XENSTORED...
+		    $XENSTORED --pid-file /var/run/xenstored.pid $XENSTORED_ARGS
+		elif [ -x /usr/sbin/oxenstored ] ; then
+		    echo -n Starting oxenstored...
+		    /usr/sbin/oxenstored --pid-file /var/run/xenstored.pid $XENSTORED_ARGS
+		elif [ -x /usr/sbin/xenstored ] ; then
+		    echo -n Starting C xenstored...
+		    /usr/sbin/xenstored --pid-file /var/run/xenstored.pid $XENSTORED_ARGS
+		else
+		    echo "No xenstored found"
+		    exit 1
+		fi
+
+		# Wait for xenstored to actually come up, timing out after 30 seconds
+                while [ $time -lt $timeout ] && ! `xenstore-read -s / >/dev/null 2>&1` ; do
+                    echo -n .
+		    time=$(($time+1))
+                    sleep 1
+                done
+		echo
+
+		# Exit if we timed out
+		if ! [ $time -lt $timeout ] ; then
+		    echo Could not start xenstored
+		    exit 1
+		fi
+
+		echo Setting domain 0 name...
+		xenstore-write "/local/domain/0/name" "Domain-0"
+	fi
+
+	echo Starting xenconsoled...
+	test -z "$XENCONSOLED_TRACE" || XENCONSOLED_ARGS=" --log=$XENCONSOLED_TRACE"
+	xenconsoled --pid-file=$XENCONSOLED_PIDFILE $XENCONSOLED_ARGS
+	test -z "$XENBACKENDD_DEBUG" || XENBACKENDD_ARGS="-d"
+	test "`uname`" != "NetBSD" || xenbackendd $XENBACKENDD_ARGS
+	echo Starting QEMU as disk backend for dom0
+	test -z "$QEMU_XEN" && QEMU_XEN=/usr/lib/xen/bin/qemu-system-i386
+	$QEMU_XEN -xen-domid 0 -xen-attach -name dom0 -nographic -M xenpv -daemonize -monitor /dev/null
+}
+do_stop () {
+        echo Stopping xenconsoled
+	if read 2>/dev/null <$XENCONSOLED_PIDFILE pid; then
+		kill $pid
+		while kill -9 $pid >/dev/null 2>&1; do sleep 0.1; done
+		rm -f $XENCONSOLED_PIDFILE
+	fi
+
+	echo WARNING: Not stopping xenstored, as it cannot be restarted.
+}
+
+case "$1" in
+  start)
+	do_start
+	;;
+  status)
+        xenstore-read -s /
+	;;
+  stop)
+	do_stop
+	;;
+  reload)
+	echo >&2 'Reload not available; use force-reload'; exit 1
+	;;
+  force-reload|restart)
+        do_stop
+	do_start
+	;;
+  *)
+	# do not advertise unreasonable commands that there is no reason
+	# to use with this device
+	echo $"Usage: $0 {start|stop|status|restart|force-reload}"
+	exit 1
+esac
+
+exit $?
diff -Naur xen-unstable.git/tools/hotplug/Linux/init.d/xend xen-unstable.git-b/tools/hotplug/Linux/init.d/xend
--- xen-unstable.git/tools/hotplug/Linux/init.d/xend	2012-06-21 06:07:36.024092668 -0600
+++ xen-unstable.git-b/tools/hotplug/Linux/init.d/xend	2012-06-21 06:09:46.787426001 -0600
@@ -18,6 +18,10 @@
 # Description:       Starts and stops the Xen control daemon.
 ### END INIT INFO
 
+. /etc/rc.conf
+. /etc/rc.d/functions
+
+
 shopt -s extglob
 
 # Wait for Xend to be up
@@ -37,23 +41,30 @@
 case "$1" in
   start)
 	if [ -z "`ps -C xenconsoled -o pid=`" ]; then
-		echo "xencommons should be started first."
+	 printhl "xencommons should be started first."
 		exit 1
 	fi
 	# mkdir shouldn't be needed as most distros have this already created. Default to using subsys.
 	# See docs/misc/distro_mapping.txt
-	mkdir -p /var/lock
-	if [ -d /var/lock/subsys ] ; then
-		touch /var/lock/subsys/xend
+	if [ -d /run/lock/subsys ] ; then
+		touch /run/lock/subsys/xend
 	else
-		touch /var/lock/xend
+		touch /run/lock/xend
 	fi
+	stat_busy "Starting xend"
 	xend start
 	await_daemons_up
+	stat_done
+	add_daemon xend
 	;;
+
+
   stop)
+   stat_busy "Stopping xend"
 	xend stop
-	rm -f /var/lock/subsys/xend /var/lock/xend
+	rm -f /run/lock/xend /var/lock/xend
+	stat_done
+	rm_daemon xend
 	;;
   status)
 	xend status
@@ -62,8 +73,10 @@
         xend reload
         ;;
   restart|force-reload)
+   stat_busy "Restarting xend"
 	xend restart
 	await_daemons_up
+	stat_done
 	;;
   *)
 	# do not advertise unreasonable commands that there is no reason
diff -Naur xen-unstable.git/tools/hotplug/Linux/init.d/xendomains xen-unstable.git-b/tools/hotplug/Linux/init.d/xendomains
--- xen-unstable.git/tools/hotplug/Linux/init.d/xendomains	2012-06-21 06:07:36.024092668 -0600
+++ xen-unstable.git-b/tools/hotplug/Linux/init.d/xendomains	2012-06-21 06:09:46.790759333 -0600
@@ -26,6 +26,9 @@
 # Description:       Start / stop domains automatically when domain 0 
 #                    boots / shuts down.
 ### END INIT INFO
+. /etc/rc.conf
+. /etc/rc.d/functions
+
 
 CMD=xm
 $CMD list &> /dev/null
@@ -46,93 +49,52 @@
 	exit 0
 fi
 
-# See docs/misc/distro_mapping.txt
-if [ -d /var/lock/subsys ]; then
-	LOCKFILE=/var/lock/subsys/xendomains
-else
-	LOCKFILE=/var/lock/xendomains
-fi
-
-if [ -d /etc/sysconfig ]; then
-	XENDOM_CONFIG=/etc/sysconfig/xendomains
-else
-	XENDOM_CONFIG=/etc/default/xendomains
-fi
+LOCKFILE=/run/lock/xendomains
+XENDOM_CONFIG=/etc/default/xendomains
 
-test -r $XENDOM_CONFIG || { echo "$XENDOM_CONFIG not existing";
+test -r $XENDOM_CONFIG || { 
+	printhl "$XENDOM_CONFIG not existing";
 	if [ "$1" = "stop" ]; then exit 0;
 	else exit 6; fi; }
 
 . $XENDOM_CONFIG
 
-# Use the SUSE rc_ init script functions;
-# emulate them on LSB, RH and other systems
-if test -e /etc/rc.status; then
-    # SUSE rc script library
-    . /etc/rc.status
-else    
-    _cmd=$1
-    declare -a _SMSG
-    if test "${_cmd}" = "status"; then
+_cmd=$1
+declare -a _SMSG
+if test "${_cmd}" = "status"; then
 	_SMSG=(running dead dead unused unknown)
 	_RC_UNUSED=3
-    else
+else
 	_SMSG=(done failed failed missed failed skipped unused failed failed)
 	_RC_UNUSED=6
-    fi
-    if test -e /etc/init.d/functions; then
-	# REDHAT
-	. /etc/init.d/functions
-	echo_rc()
-	{
-	    #echo -n "  [${_SMSG[${_RC_RV}]}] "
-	    if test ${_RC_RV} = 0; then
-		success "  [${_SMSG[${_RC_RV}]}] "
-	    else
-		failure "  [${_SMSG[${_RC_RV}]}] "
-	    fi
-	}
-    elif test -e /lib/lsb/init-functions; then
-	# LSB    
-    	. /lib/lsb/init-functions
-        if alias log_success_msg >/dev/null 2>/dev/null; then
-	  echo_rc()
-	  {
-	       echo "  [${_SMSG[${_RC_RV}]}] "
-	  }
-        else
-	  echo_rc()
-	  {
-	    if test ${_RC_RV} = 0; then
-		log_success_msg "  [${_SMSG[${_RC_RV}]}] "
-	    else
-		log_failure_msg "  [${_SMSG[${_RC_RV}]}] "
-	    fi
-	  }
-        fi
-    else    
-	# emulate it
-	echo_rc()
-	{
-	    echo "  [${_SMSG[${_RC_RV}]}] "
-	}
-    fi
-    rc_reset() { _RC_RV=0; }
-    rc_failed()
-    {
+fi
+
+
+
+echo_rc() {
+	echo
+	printhl "Return Status: ${_SMSG[${_RC_RV}]}"
+}
+
+
+rc_reset() { _RC_RV=0; }
+
+
+rc_failed() {
 	if test -z "$1"; then 
-	    _RC_RV=1;
+		_RC_RV=1;
 	elif test "$1" != "0"; then 
-	    _RC_RV=$1; 
-    	fi
+		_RC_RV=$1; 
+	fi
 	return ${_RC_RV}
-    }
-    rc_check()
-    {
+}
+
+rc_check() {
 	return rc_failed $?
-    }	
-    rc_status()
-    {
+}	
+
+
+rc_status() {
 	rc_failed $?
 	if test "$1" = "-r"; then _RC_RV=0; shift; fi
 	if test "$1" = "-s"; then rc_failed 5; echo_rc; rc_failed 3; shift; fi
@@ -140,26 +102,24 @@
 	if test "$1" = "-v"; then echo_rc; shift; fi
 	if test "$1" = "-r"; then _RC_RV=0; shift; fi
 	return ${_RC_RV}
-    }
-    rc_exit() { exit ${_RC_RV}; }
-    rc_active() 
-    {
+}
+
+
+rc_exit() { exit ${_RC_RV}; }
+
+
+rc_active() {
 	if test -z "$RUNLEVEL"; then read RUNLEVEL REST < <(/sbin/runlevel); fi
 	if test -e /etc/init.d/S[0-9][0-9]${1}; then return 0; fi
 	return 1
-    }
-fi
+}
 
-if ! which usleep >&/dev/null
-then
-  usleep()
-  {
-    if [ -n "$1" ]
-    then
-      sleep $(( $1 / 1000000 ))
-    fi
-  }
-fi
+usleep() {
+	if [ -n "$1" ]
+	then
+	  sleep $(( $1 / 1000000 ))
+	fi
+}
 
 # Reset status of this service
 rc_reset
@@ -240,10 +200,12 @@
 start() 
 {
     if [ -f $LOCKFILE ]; then 
-	echo -e "xendomains already running (lockfile exists)"
+	stat_busy "xendomains already running (lockfile exists)"
+	stat_fail
 	return; 
     fi
 
+    printhl "Starting Xen Domains"
     saved_domains=" "
     if [ "$XENDOMAINS_RESTORE" = "true" ] &&
        contains_something "$XENDOMAINS_SAVE"
@@ -304,6 +266,7 @@
 	    fi
 	done
     fi
+    add_daemon xendomains
 }
 
 all_zombies()
@@ -357,7 +320,7 @@
     if test "$XENDOMAINS_AUTO_ONLY" = "true"; then
 	rdnames
     fi
-    echo -n "Shutting down Xen domains:"
+    printhl "Shutting down Xen domains"
     name=;id=
     while read LN; do
 	parseln "$LN" || continue
@@ -470,6 +433,7 @@
     rm -f $LOCKFILE
     
     exec 2>&3
+    rm_daemon xendomains
 }
 
 check_domain_up()
diff -Naur xen-unstable.git/tools/hotplug/Linux/init.d/xendomains.orig xen-unstable.git-b/tools/hotplug/Linux/init.d/xendomains.orig
--- xen-unstable.git/tools/hotplug/Linux/init.d/xendomains.orig	1969-12-31 17:00:00.000000000 -0700
+++ xen-unstable.git-b/tools/hotplug/Linux/init.d/xendomains.orig	2012-06-21 06:07:36.024092668 -0600
@@ -0,0 +1,581 @@
+#!/bin/bash
+#
+# /etc/init.d/xendomains
+# Start / stop domains automatically when domain 0 boots / shuts down.
+#
+# chkconfig: 345 99 00
+# description: Start / stop Xen domains.
+#
+# This script offers fairly basic functionality.  It should work on Redhat
+# but also on LSB-compliant SuSE releases and on Debian with the LSB package
+# installed.  (LSB is the Linux Standard Base)
+#
+# Based on the example in the "Designing High Quality Integrated Linux
+# Applications HOWTO" by Avi Alkalay
+# <http://www.tldp.org/HOWTO/HighQuality-Apps-HOWTO/>
+#
+### BEGIN INIT INFO
+# Provides:          xendomains
+# Required-Start:    $syslog $remote_fs xenstored xenconsoled
+# Should-Start:      xend
+# Required-Stop:     $syslog $remote_fs xenstored xenconsoled
+# Should-Stop:       xend
+# Default-Start:     2 3 5
+# Default-Stop:      0 1 6
+# Short-Description: Start/stop secondary xen domains
+# Description:       Start / stop domains automatically when domain 0 
+#                    boots / shuts down.
+### END INIT INFO
+
+CMD=xm
+$CMD list &> /dev/null
+if test $? -ne 0
+then
+	CMD=xl
+fi
+
+$CMD list &> /dev/null
+if test $? -ne 0
+then
+	exit 0;
+fi
+
+# Correct exit code would probably be 5, but it's enough 
+# if xend complains if we're not running as privileged domain
+if ! [ -e /proc/xen/privcmd ]; then
+	exit 0
+fi
+
+# See docs/misc/distro_mapping.txt
+if [ -d /var/lock/subsys ]; then
+	LOCKFILE=/var/lock/subsys/xendomains
+else
+	LOCKFILE=/var/lock/xendomains
+fi
+
+if [ -d /etc/sysconfig ]; then
+	XENDOM_CONFIG=/etc/sysconfig/xendomains
+else
+	XENDOM_CONFIG=/etc/default/xendomains
+fi
+
+test -r $XENDOM_CONFIG || { echo "$XENDOM_CONFIG not existing";
+	if [ "$1" = "stop" ]; then exit 0;
+	else exit 6; fi; }
+
+. $XENDOM_CONFIG
+
+# Use the SUSE rc_ init script functions;
+# emulate them on LSB, RH and other systems
+if test -e /etc/rc.status; then
+    # SUSE rc script library
+    . /etc/rc.status
+else    
+    _cmd=$1
+    declare -a _SMSG
+    if test "${_cmd}" = "status"; then
+	_SMSG=(running dead dead unused unknown)
+	_RC_UNUSED=3
+    else
+	_SMSG=(done failed failed missed failed skipped unused failed failed)
+	_RC_UNUSED=6
+    fi
+    if test -e /etc/init.d/functions; then
+	# REDHAT
+	. /etc/init.d/functions
+	echo_rc()
+	{
+	    #echo -n "  [${_SMSG[${_RC_RV}]}] "
+	    if test ${_RC_RV} = 0; then
+		success "  [${_SMSG[${_RC_RV}]}] "
+	    else
+		failure "  [${_SMSG[${_RC_RV}]}] "
+	    fi
+	}
+    elif test -e /lib/lsb/init-functions; then
+	# LSB    
+    	. /lib/lsb/init-functions
+        if alias log_success_msg >/dev/null 2>/dev/null; then
+	  echo_rc()
+	  {
+	       echo "  [${_SMSG[${_RC_RV}]}] "
+	  }
+        else
+	  echo_rc()
+	  {
+	    if test ${_RC_RV} = 0; then
+		log_success_msg "  [${_SMSG[${_RC_RV}]}] "
+	    else
+		log_failure_msg "  [${_SMSG[${_RC_RV}]}] "
+	    fi
+	  }
+        fi
+    else    
+	# emulate it
+	echo_rc()
+	{
+	    echo "  [${_SMSG[${_RC_RV}]}] "
+	}
+    fi
+    rc_reset() { _RC_RV=0; }
+    rc_failed()
+    {
+	if test -z "$1"; then 
+	    _RC_RV=1;
+	elif test "$1" != "0"; then 
+	    _RC_RV=$1; 
+    	fi
+	return ${_RC_RV}
+    }
+    rc_check()
+    {
+	return rc_failed $?
+    }	
+    rc_status()
+    {
+	rc_failed $?
+	if test "$1" = "-r"; then _RC_RV=0; shift; fi
+	if test "$1" = "-s"; then rc_failed 5; echo_rc; rc_failed 3; shift; fi
+	if test "$1" = "-u"; then rc_failed ${_RC_UNUSED}; echo_rc; rc_failed 3; shift; fi
+	if test "$1" = "-v"; then echo_rc; shift; fi
+	if test "$1" = "-r"; then _RC_RV=0; shift; fi
+	return ${_RC_RV}
+    }
+    rc_exit() { exit ${_RC_RV}; }
+    rc_active() 
+    {
+	if test -z "$RUNLEVEL"; then read RUNLEVEL REST < <(/sbin/runlevel); fi
+	if test -e /etc/init.d/S[0-9][0-9]${1}; then return 0; fi
+	return 1
+    }
+fi
+
+if ! which usleep >&/dev/null
+then
+  usleep()
+  {
+    if [ -n "$1" ]
+    then
+      sleep $(( $1 / 1000000 ))
+    fi
+  }
+fi
+
+# Reset status of this service
+rc_reset
+
+##
+# Returns 0 (success) if the given parameter names a directory, and that
+# directory is not empty.
+#
+contains_something()
+{
+  if [ -d "$1" ] && [ `/bin/ls $1 | wc -l` -gt 0 ]
+  then
+    return 0
+  else
+    return 1
+  fi
+}
+
+# read name from xen config file
+rdname()
+{
+    NM=$($CMD create --quiet --dryrun --defconfig "$1" |
+         sed -n 's/^.*(name \(.*\))$/\1/p')
+}
+
+rdnames()
+{
+    NAMES=
+    if ! contains_something "$XENDOMAINS_AUTO"
+    then 
+	return
+    fi
+    for dom in $XENDOMAINS_AUTO/*; do
+	rdname $dom
+	if test -z $NAMES; then 
+	    NAMES=$NM; 
+	else
+	    NAMES="$NAMES|$NM"
+	fi
+    done
+}
+
+LIST_GREP='((domain\|(domid\|(name\|^{$\|"name":\|"domid":'
+parseln()
+{
+    if [[ "$1" =~ '(domain' ]] || [[ "$1" = "{" ]]; then
+        name=;id=
+    elif [[ "$1" =~ '(name' ]]; then
+        name=$(echo $1 | sed -e 's/^.*(name \(.*\))$/\1/')
+    elif [[ "$1" =~ '(domid' ]]; then
+        id=$(echo $1 | sed -e 's/^.*(domid \(.*\))$/\1/')
+    elif [[ "$1" =~ '"name":' ]]; then
+        name=$(echo $1 | sed -e 's/^.*"name": "\(.*\)",$/\1/')
+    elif [[ "$1" =~ '"domid":' ]]; then
+        id=$(echo $1 | sed -e 's/^.*"domid": \(.*\),$/\1/')
+    fi
+
+    [ -n "$name" -a -n "$id" ] && return 0 || return 1
+}
+
+is_running()
+{
+    rdname $1
+    RC=1
+    name=;id=
+    while read LN; do
+	parseln "$LN" || continue
+	if test $id = 0; then continue; fi
+	case $name in 
+	    ($NM)
+		RC=0
+		;;
+	esac
+    done < <($CMD list -l | grep $LIST_GREP)
+    return $RC
+}
+
+start() 
+{
+    if [ -f $LOCKFILE ]; then 
+	echo -e "xendomains already running (lockfile exists)"
+	return; 
+    fi
+
+    saved_domains=" "
+    if [ "$XENDOMAINS_RESTORE" = "true" ] &&
+       contains_something "$XENDOMAINS_SAVE"
+    then
+	mkdir -p $(dirname "$LOCKFILE")
+	touch $LOCKFILE
+	echo -n "Restoring Xen domains:"
+	saved_domains=`ls $XENDOMAINS_SAVE`
+        for dom in $XENDOMAINS_SAVE/*; do
+            if [ -f $dom ] ; then
+                HEADER=`head -c 16 $dom | head -n 1 2> /dev/null`
+                if [ $HEADER = "LinuxGuestRecord" ]; then
+                    echo -n " ${dom##*/}"
+                    XMR=`$CMD restore $dom 2>&1 1>/dev/null`
+                    #$CMD restore $dom
+                    if [ $? -ne 0 ]; then
+                        echo -e "\nAn error occurred while restoring domain ${dom##*/}:\n$XMR"
+                        rc_failed $?
+                        echo -e '!'
+                    else
+                        # mv $dom ${dom%/*}/.${dom##*/}
+                        rm $dom
+                    fi
+                fi
+            fi
+        done
+	echo -e
+    fi
+
+    if contains_something "$XENDOMAINS_AUTO"
+    then
+	touch $LOCKFILE
+	echo -n "Starting auto Xen domains:"
+	# We expect config scripts for auto starting domains to be in
+	# XENDOMAINS_AUTO - they could just be symlinks to files elsewhere
+
+	# Create all domains with config files in XENDOMAINS_AUTO.
+	# TODO: We should record which domain name belongs 
+	# so we have the option to selectively shut down / migrate later
+	# If a domain statefile from $XENDOMAINS_SAVE matches a domain name
+	# in $XENDOMAINS_AUTO, do not try to start that domain; if it didn't 
+	# restore correctly it requires administrative attention.
+	for dom in $XENDOMAINS_AUTO/*; do
+	    echo -n " ${dom##*/}"
+	    shortdom=$(echo $dom | sed -n 's/^.*\/\(.*\)$/\1/p')
+	    echo $saved_domains | grep -w $shortdom > /dev/null
+	    if [ $? -eq 0 ] || is_running $dom; then
+		echo -n "(skip)"
+	    else
+		XMC=`$CMD create --quiet --defconfig $dom`
+		if [ $? -ne 0 ]; then
+		    echo -e "\nAn error occurred while creating domain ${dom##*/}: $XMC\n"
+		    rc_failed $?
+		    echo -e '!'
+		else
+		    usleep $XENDOMAINS_CREATE_USLEEP
+		fi
+	    fi
+	done
+    fi
+}
+
+all_zombies()
+{
+    name=;id=
+    while read LN; do
+	parseln "$LN" || continue
+	if test $id = 0; then continue; fi
+	if test "$state" != "-b---d" -a "$state" != "-----d"; then
+	    return 1;
+	fi
+    done < <($CMD list -l | grep $LIST_GREP)
+    return 0
+}
+
+# Wait for max $XENDOMAINS_STOP_MAXWAIT for $CMD $1 to finish;
+# if it has not exited by that time kill it, so the init script will
+# succeed within a finite amount of time; if $2 is nonnull, it will
+# kill the command as well as soon as no domain (except for zombies)
+# are left (used for shutdown --all). Third parameter, if any, suppresses
+# output of dots per working state (formatting issues)
+watchdog_xencmd()
+{
+    if test -z "$XENDOMAINS_STOP_MAXWAIT" -o "$XENDOMAINS_STOP_MAXWAIT" = "0"; then
+	exit
+    fi
+
+    usleep 20000
+    for no in `seq 0 $XENDOMAINS_STOP_MAXWAIT`; do
+	# exit if $CMD save/migrate/shutdown is finished
+	PSAX=`ps axlw | grep "$CMD $1" | grep -v grep`
+	if test -z "$PSAX"; then exit; fi
+	if ! test -n "$3"; then echo -n '.'; fi
+	sleep 1
+	# go to kill immediately if there's only zombies left
+	if all_zombies && test -n "$2"; then break; fi
+    done
+    sleep 1
+    read PSF PSUID PSPID PSPPID < <(echo "$PSAX")
+    # kill $CMD $1
+    kill $PSPID >/dev/null 2>&1
+    
+    echo -e .
+}
+
+stop()
+{
+    exec 3>&2 2> /dev/null
+    
+    # Collect list of domains to shut down
+    if test "$XENDOMAINS_AUTO_ONLY" = "true"; then
+	rdnames
+    fi
+    echo -n "Shutting down Xen domains:"
+    name=;id=
+    while read LN; do
+	parseln "$LN" || continue
+	if test $id = 0; then continue; fi
+	echo -n " $name"
+	if test "$XENDOMAINS_AUTO_ONLY" = "true"; then
+	    eval "
+	    case \"\$name\" in
+		($NAMES)
+		    # nothing
+		    ;;
+		(*)
+		    echo -e '(skip)'
+		    continue
+		    ;;
+	    esac
+	    "
+	fi
+	# XENDOMAINS_SYSRQ chould be something like just "s" 
+	# or "s e i u" or even "s e s i u o"
+	# for the latter, you should set XENDOMAINS_USLEEP to 1200000 or so
+	if test -n "$XENDOMAINS_SYSRQ"; then
+	    for sysrq in $XENDOMAINS_SYSRQ; do
+		echo -n "(SR-$sysrq)"
+		XMR=`$CMD sysrq $id $sysrq 2>&1 1>/dev/null`
+		if test $? -ne 0; then
+		    echo -e "\nAn error occurred while doing sysrq on domain:\n$XMR\n"
+		    rc_failed $?
+		    echo -n '!'
+		fi
+		# usleep just ignores empty arg
+		usleep $XENDOMAINS_USLEEP
+	    done
+	fi
+	if test "$state" = "-b---d" -o "$state" = "-----d"; then
+	    echo -n "(zomb)"
+	    continue
+	fi
+	if test -n "$XENDOMAINS_MIGRATE"; then
+	    echo -n "(migr)"
+	    watchdog_xencmd migrate &
+	    WDOG_PID=$!
+	    XMR=`$CMD migrate $id $XENDOMAINS_MIGRATE 2>&1 1>/dev/null`
+	    if test $? -ne 0; then
+		echo -e "\nAn error occurred while migrating domain:\n$XMR\n"
+		rc_failed $?
+		echo -e '!'
+
+		kill $WDOG_PID >/dev/null 2>&1
+	    else
+		kill $WDOG_PID >/dev/null 2>&1
+		
+		echo -e .
+		usleep 1000
+		continue
+	    fi
+	fi
+	if test -n "$XENDOMAINS_SAVE"; then
+	    echo -n "(save)"
+	    watchdog_xencmd save &
+	    WDOG_PID=$!
+	    mkdir -p "$XENDOMAINS_SAVE"
+	    XMR=`$CMD save $id $XENDOMAINS_SAVE/$name 2>&1 1>/dev/null`
+	    if test $? -ne 0; then
+		echo -e "\nAn error occurred while saving domain:\n$XMR\n"
+		rc_failed $?
+		echo -e '!'
+		kill $WDOG_PID >/dev/null 2>&1
+	    else
+		kill $WDOG_PID >/dev/null 2>&1
+		echo -e .
+		usleep 1000
+		continue
+	    fi
+	fi
+	if test -n "$XENDOMAINS_SHUTDOWN"; then
+	    # XENDOMAINS_SHUTDOWN should be "--halt --wait"
+	    echo -n "(shut)"
+	    watchdog_xencmd shutdown &
+	    WDOG_PID=$!
+	    XMR=`$CMD shutdown $id $XENDOMAINS_SHUTDOWN 2>&1 1>/dev/null`
+	    if test $? -ne 0; then
+		echo -e "\nAn error occurred while shutting down domain:\n$XMR\n"
+		rc_failed $?
+		echo -e '!'
+	    fi
+	    kill $WDOG_PID >/dev/null 2>&1
+	fi
+    done < <($CMD list -l | grep $LIST_GREP)
+
+    # NB. this shuts down ALL Xen domains (politely), not just the ones in
+    # AUTODIR/*
+    # This is because it's easier to do ;-) but arguably if this script is run
+    # on system shutdown then it's also the right thing to do.
+    if ! all_zombies && test -n "$XENDOMAINS_SHUTDOWN_ALL"; then
+	# XENDOMAINS_SHUTDOWN_ALL should be "--all --halt --wait"
+	echo -n " SHUTDOWN_ALL "
+	watchdog_xencmd shutdown 1 false &
+	WDOG_PID=$!
+	XMR=`$CMD shutdown $XENDOMAINS_SHUTDOWN_ALL 2>&1 1>/dev/null`
+	if test $? -ne 0; then
+	    echo -e "\nAn error occurred while shutting down all domains: $XMR\n"
+	    rc_failed $?
+	    echo -e '!'
+	fi
+	kill $WDOG_PID >/dev/null 2>&1
+    fi
+
+    # Unconditionally delete lock file
+    rm -f $LOCKFILE
+    
+    exec 2>&3
+}
+
+check_domain_up()
+{
+    name=;id=
+    while read LN; do
+	parseln "$LN" || continue
+	if test $id = 0; then continue; fi
+	case $name in 
+	    ($1)
+		return 0
+		;;
+	esac
+    done < <($CMD list -l | grep $LIST_GREP)
+    return 1
+}
+
+check_all_auto_domains_up()
+{
+    if ! contains_something "$XENDOMAINS_AUTO"
+    then
+      return 0
+    fi
+    missing=
+    for nm in $XENDOMAINS_AUTO/*; do
+	rdname $nm
+	found=0
+	if check_domain_up "$NM"; then 
+	    echo -n " $name"
+	else 
+	    missing="$missing $NM"
+	fi
+    done
+    if test -n "$missing"; then
+	echo -n " MISS AUTO:$missing"
+	return 1
+    fi
+    return 0
+}
+
+check_all_saved_domains_up()
+{
+    if ! contains_something "$XENDOMAINS_SAVE" 
+    then
+      return 0
+    fi
+    missing=`/bin/ls $XENDOMAINS_SAVE`
+    echo -n " MISS SAVED: " $missing
+    return 1
+}
+
+# This does NOT necessarily restart all running domains: instead it
+# stops all running domains and then boots all the domains specified in
+# AUTODIR.  If other domains have been started manually then they will
+# not get restarted.
+# Commented out to avoid confusion!
+
+restart()
+{
+    stop
+    start
+}
+
+reload()
+{
+    restart
+}
+
+
+case "$1" in
+    start)
+	start
+	rc_status
+	if test -f $LOCKFILE; then rc_status -v; fi
+	;;
+
+    stop)
+	stop
+	rc_status -v
+	;;
+
+    restart)
+	restart
+	;;
+    reload)
+	reload
+	;;
+
+    status)
+	echo -n "Checking for xendomains:" 
+	if test ! -f $LOCKFILE; then 
+	    rc_failed 3
+	else
+	    check_all_auto_domains_up
+	    rc_status
+	    check_all_saved_domains_up
+	    rc_status
+	fi
+	rc_status -v
+	;;
+
+    *)
+	echo "Usage: $0 {start|stop|restart|reload|status}"
+	rc_failed 3
+	rc_status -v
+	;;
+esac
+
+rc_exit
diff -Naur xen-unstable.git/tools/libxl/libxl_internal.h xen-unstable.git-b/tools/libxl/libxl_internal.h
--- xen-unstable.git/tools/libxl/libxl_internal.h	2012-06-21 06:07:36.094092666 -0600
+++ xen-unstable.git-b/tools/libxl/libxl_internal.h	2012-06-21 18:04:42.164092668 -0600
@@ -347,7 +347,7 @@
 #define AUTO_PHP_SLOT          0x100
 #define SYSFS_PCI_DEV          "/sys/bus/pci/devices"
 #define SYSFS_PCIBACK_DRIVER   "/sys/bus/pci/drivers/pciback"
-#define XENSTORE_PID_FILE      "/var/run/xenstored.pid"
+#define XENSTORE_PID_FILE      "/run/daemons/xenstored.pid"
 
 #define PROC_PCI_NUM_RESOURCES 7
 #define PCI_BAR_IO             0x01
diff -Naur xen-unstable.git/tools/libxl/xl.c xen-unstable.git-b/tools/libxl/xl.c
--- xen-unstable.git/tools/libxl/xl.c	2012-06-21 06:07:36.107426001 -0600
+++ xen-unstable.git-b/tools/libxl/xl.c	2012-06-21 06:33:40.564092667 -0600
@@ -32,7 +32,7 @@
 #include "libxlutil.h"
 #include "xl.h"
 
-#define XEND_LOCK { "/var/lock/subsys/xend", "/var/lock/xend" }
+#define XEND_LOCK { "/run/lock/subsys/xend", "/run/lock/xend" }
 
 xentoollog_logger_stdiostream *logger;
 int dryrun_only;
